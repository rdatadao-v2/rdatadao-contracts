#!/bin/bash

# Script to set up frontend integration with wagmi

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${GREEN}Setting up frontend integration...${NC}"

# Check if we're in the contracts directory
if [ ! -f "foundry.toml" ]; then
    echo -e "${RED}Error: Must run from the contracts directory${NC}"
    exit 1
fi

# Step 1: Export ABIs
echo -e "\n${YELLOW}Step 1: Exporting contract ABIs...${NC}"
./scripts/export-abi.sh

# Step 2: Create frontend example structure
FRONTEND_DIR="../frontend-example"
echo -e "\n${YELLOW}Step 2: Creating frontend example structure...${NC}"

# Create directories
mkdir -p "$FRONTEND_DIR/src/config"
mkdir -p "$FRONTEND_DIR/src/hooks"
mkdir -p "$FRONTEND_DIR/src/components"

# Create example wagmi config
cat > "$FRONTEND_DIR/src/config/wagmi.ts" << 'EOF'
import { createConfig, http } from 'wagmi'
import { base, baseSepolia } from 'wagmi/chains'
import { injected, metaMask, walletConnect } from 'wagmi/connectors'

// Import generated contract types
// import { rdatABI, mockRdatABI } from '../generated'

// Define Vana chains
export const vana = {
  id: 1480,
  name: 'Vana',
  nativeCurrency: {
    decimals: 18,
    name: 'VANA',
    symbol: 'VANA',
  },
  rpcUrls: {
    default: { http: ['https://rpc.vana.network'] },
  },
  blockExplorers: {
    default: { name: 'Vana Explorer', url: 'https://explorer.vana.network' },
  },
} as const

export const vanaMoksha = {
  id: 14800,
  name: 'Vana Moksha Testnet',
  nativeCurrency: {
    decimals: 18,
    name: 'Vana',
    symbol: 'VANA',
  },
  rpcUrls: {
    default: { http: ['https://moksha-rpc.vana.network'] },
  },
  blockExplorers: {
    default: { name: 'Vana Moksha Explorer', url: 'https://moksha-explorer.vana.network' },
  },
  testnet: true,
} as const

// Contract addresses
export const CONTRACT_ADDRESSES = {
  base: {
    RDAT: '0x4498cd8ba045e00673402353f5a4347562707e7d',
    migration: '', // To be deployed
  },
  baseSepolia: {
    mockRDAT: '', // To be deployed
    migration: '', // To be deployed
  },
  vana: {
    RDAT: '', // To be deployed
    distributor: '', // To be deployed
  },
  vanaMoksha: {
    RDAT: '', // To be deployed
    distributor: '', // To be deployed
  },
} as const

// Wagmi configuration
export const config = createConfig({
  chains: [base, baseSepolia, vana, vanaMoksha],
  connectors: [
    injected(),
    metaMask(),
    walletConnect({ projectId: 'YOUR_WALLETCONNECT_PROJECT_ID' }),
  ],
  transports: {
    [base.id]: http(),
    [baseSepolia.id]: http(),
    [vana.id]: http(),
    [vanaMoksha.id]: http(),
  },
})
EOF

# Create example hook
cat > "$FRONTEND_DIR/src/hooks/useRDAT.ts" << 'EOF'
import { useAccount, useReadContract, useWriteContract } from 'wagmi'
import { parseEther, formatEther } from 'viem'
import { CONTRACT_ADDRESSES } from '../config/wagmi'

// Import the ABI (generated by wagmi CLI)
// import { mockRdatABI } from '../generated'

export function useRDATBalance() {
  const { address, chain } = useAccount()
  
  // Get the correct contract address for the current chain
  const contractAddress = chain?.id === 8453 
    ? CONTRACT_ADDRESSES.base.RDAT
    : CONTRACT_ADDRESSES.baseSepolia.mockRDAT

  return useReadContract({
    address: contractAddress as `0x${string}`,
    abi: [], // Replace with mockRdatABI from generated file
    functionName: 'balanceOf',
    args: [address!],
    enabled: !!address,
  })
}

export function useRDATTransfer() {
  const { writeContract } = useWriteContract()
  const { chain } = useAccount()
  
  const contractAddress = chain?.id === 8453 
    ? CONTRACT_ADDRESSES.base.RDAT
    : CONTRACT_ADDRESSES.baseSepolia.mockRDAT

  const transfer = async (to: string, amount: string) => {
    return writeContract({
      address: contractAddress as `0x${string}`,
      abi: [], // Replace with mockRdatABI from generated file
      functionName: 'transfer',
      args: [to as `0x${string}`, parseEther(amount)],
    })
  }

  return { transfer }
}
EOF

# Create example component
cat > "$FRONTEND_DIR/src/components/TokenBalance.tsx" << 'EOF'
import { useRDATBalance } from '../hooks/useRDAT'
import { formatEther } from 'viem'

export function TokenBalance() {
  const { data: balance, isLoading, error } = useRDATBalance()

  if (isLoading) return <div>Loading balance...</div>
  if (error) return <div>Error loading balance</div>

  return (
    <div>
      <h2>RDAT Balance</h2>
      <p>{balance ? formatEther(balance) : '0'} RDAT</p>
    </div>
  )
}
EOF

# Create package.json
cat > "$FRONTEND_DIR/package.json" << 'EOF'
{
  "name": "rdat-frontend-example",
  "version": "1.0.0",
  "description": "Example frontend for RDAT token integration",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "generate": "wagmi generate"
  },
  "dependencies": {
    "@tanstack/react-query": "^5.0.0",
    "next": "^14.0.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "viem": "^2.0.0",
    "wagmi": "^2.0.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.0",
    "@wagmi/cli": "^2.0.0",
    "typescript": "^5.0.0"
  }
}
EOF

# Create README
cat > "$FRONTEND_DIR/README.md" << 'EOF'
# RDAT Frontend Integration Example

This example shows how to integrate RDAT token contracts with a React frontend using wagmi.

## Setup

1. Install dependencies:
   ```bash
   npm install
   ```

2. Copy the wagmi.config.ts from the contracts directory:
   ```bash
   cp ../rdatadao-contracts/wagmi.config.ts .
   ```

3. Generate TypeScript types from contract ABIs:
   ```bash
   npx wagmi generate
   ```

4. Update the contract addresses in `src/config/wagmi.ts` with your deployed addresses.

5. Start the development server:
   ```bash
   npm run dev
   ```

## Using the Generated Types

After running `wagmi generate`, you'll have fully typed React hooks:

```typescript
import { 
  useReadMockRdat,
  useWriteMockRdat,
  useWatchMockRdatEvent 
} from './generated'

// Read balance
const { data: balance } = useReadMockRdat({
  functionName: 'balanceOf',
  args: [address],
})

// Transfer tokens
const { writeContract } = useWriteMockRdat({
  functionName: 'transfer',
})

// Watch for events
useWatchMockRdatEvent({
  eventName: 'Transfer',
  onLogs(logs) {
    console.log('Transfer events:', logs)
  },
})
```

## Contract ABIs

The contract ABIs are located in `../rdatadao-contracts/abi/` and are automatically loaded by the wagmi CLI.
EOF

echo -e "\n${GREEN}Frontend setup complete!${NC}"
echo -e "${GREEN}Example frontend structure created in: $FRONTEND_DIR${NC}"
echo -e "\n${YELLOW}Next steps:${NC}"
echo "1. cd $FRONTEND_DIR"
echo "2. npm install"
echo "3. Copy wagmi.config.ts from contracts directory"
echo "4. Run: npx wagmi generate"
echo "5. Update contract addresses in src/config/wagmi.ts"